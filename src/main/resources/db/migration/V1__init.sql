-- Удаление таблиц в правильном порядке (сначала дочерние, затем родительские)
DROP TABLE IF EXISTS buckets_items CASCADE;
DROP TABLE IF EXISTS user_feedback CASCADE;
DROP TABLE IF EXISTS photo CASCADE;
DROP TABLE IF EXISTS items_categories CASCADE;
DROP TABLE IF EXISTS product_property CASCADE;
DROP TABLE IF EXISTS property CASCADE;
DROP TABLE IF EXISTS user_role CASCADE;
DROP TABLE IF EXISTS refresh_token CASCADE;
DROP TABLE IF EXISTS items CASCADE;
DROP TABLE IF EXISTS categories CASCADE;
DROP TABLE IF EXISTS category CASCADE;
DROP TABLE IF EXISTS buckets CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- Создание последовательностей
CREATE SEQUENCE IF NOT EXISTS buckets_id_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS category_sequence START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS item_sequence START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS refresh_token_token_id_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE IF NOT EXISTS user_sequence START WITH 1 INCREMENT BY 1;

-- 1. Сначала создаём таблицы без внешних ключей
CREATE TABLE users (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                       address VARCHAR(255),
                       email VARCHAR(255),
                       password VARCHAR(255),
                       username VARCHAR(255),
                       CONSTRAINT users_pkey PRIMARY KEY (id)
);



CREATE TABLE categories (
                            id BIGINT NOT NULL,
                            name VARCHAR(255),
                            parent_category VARCHAR(255),
                            parent_category_id BIGINT,
                            CONSTRAINT categories_pkey PRIMARY KEY (id)
);

CREATE TABLE items (
                       id BIGINT NOT NULL,
                       price BIGINT NOT NULL,
                       count BIGINT,
                       description VARCHAR(255),
                       image VARCHAR(255),
                       name VARCHAR(255),
                       product_property_id BIGINT NOT NULL,
                       discount_price BIGINT,
                       discount BOOLEAN NOT NULL,
                       category_id BIGINT NOT NULL,
                       CONSTRAINT items_pkey PRIMARY KEY (id)
);

CREATE TABLE product_property (
                                  product_property_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                                  PRIMARY KEY (product_property_id)
);

CREATE TABLE property (
                          property_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                          product_property_id BIGINT NOT NULL,
                          name VARCHAR(255) NOT NULL,
                          value VARCHAR(255) NOT NULL,
                          PRIMARY KEY (property_id)
);

CREATE TABLE refresh_token (
                               token_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                               user_id BIGINT,
                               token VARCHAR(255),
                               CONSTRAINT refresh_token_pkey PRIMARY KEY (token_id),
                               CONSTRAINT refresh_token_user_id_key UNIQUE (user_id)
);

CREATE TABLE user_feedback (
                               user_feedback_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
                               user_id BIGINT NOT NULL,
                               product_id BIGINT NOT NULL,
                               feedback BIGINT NOT NULL,
                               comment VARCHAR(500),
                               PRIMARY KEY (user_feedback_id)
);

CREATE TABLE buckets_items (
                               id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                               user_id BIGINT NOT NULL,
                               item_id BIGINT NOT NULL,
                               count INTEGER NOT NULL,
                               PRIMARY KEY (id)
);

CREATE TABLE user_role (
                           user_id BIGINT NOT NULL,
                           role VARCHAR(255) NOT NULL,
                           PRIMARY KEY (user_id, role)
);

-- 2. Теперь добавляем внешние ключи




ALTER TABLE refresh_token
    ADD CONSTRAINT fkjtx87i0jvq2svedphegvdwcuy FOREIGN KEY (user_id)
        REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE items
    ADD CONSTRAINT fk_category_id FOREIGN KEY (category_id)
        REFERENCES categories (id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_product_property_id FOREIGN KEY (product_property_id)
        REFERENCES product_property (product_property_id) ON DELETE CASCADE;

ALTER TABLE property
    ADD CONSTRAINT fk_product_property FOREIGN KEY (product_property_id)
        REFERENCES product_property (product_property_id) ON DELETE CASCADE;

ALTER TABLE user_feedback
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
        REFERENCES users (id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_product_id FOREIGN KEY (product_id)
        REFERENCES items (id) ON DELETE CASCADE;

ALTER TABLE buckets_items
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
        REFERENCES users (id) ON DELETE CASCADE,
    ADD CONSTRAINT fk_item_id FOREIGN KEY (item_id)
        REFERENCES items (id) ON DELETE CASCADE;

ALTER TABLE user_role
    ADD CONSTRAINT fk_user_id_role FOREIGN KEY (user_id)
        REFERENCES users (id) ON DELETE CASCADE;